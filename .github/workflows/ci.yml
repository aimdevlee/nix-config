name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sunday at midnight UTC
    - cron: '0 0 * * 0'

jobs:
  # Quick validation checks that run on every push/PR
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      # Format check - ensures consistent code style
      - name: Check formatting
        run: |
          nix fmt -- --check .
      
      # Flake check - validates flake structure and outputs
      - name: Flake check
        run: |
          nix flake check --no-build
      
      # Evaluate configurations without building
      - name: Evaluate Personal Darwin configuration
        run: |
          nix eval .#darwinConfigurations.personal.config.system.build.toplevel \
            --raw --impure --allow-import-from-derivation
      
      - name: Evaluate Work Darwin configuration
        run: |
          nix eval .#darwinConfigurations.work.config.system.build.toplevel \
            --raw --impure --allow-import-from-derivation

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      # Run deadnix to find unused code
      - name: Check for dead code
        run: |
          # Note: Not using --fail to allow warnings for intentionally unused arguments
          nix run nixpkgs#deadnix -- . || true
      
      # Run statix for anti-patterns
      - name: Check for anti-patterns
        run: |
          # Note: Allow warnings as some patterns are intentional
          nix run nixpkgs#statix -- check . || true

  # Dependency analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      # Check for outdated inputs
      - name: Check flake inputs
        run: |
          echo "## Current flake inputs:" >> $GITHUB_STEP_SUMMARY
          nix flake metadata --json | jq -r '.locks.nodes | to_entries[] | "- \(.key): \(.value.locked.rev // "N/A")"' >> $GITHUB_STEP_SUMMARY
      
      # Check if updates are available
      - name: Check for updates
        run: |
          echo "## Available updates:" >> $GITHUB_STEP_SUMMARY
          nix flake update --dry-run 2>&1 | grep -E "• Updated|• Added" >> $GITHUB_STEP_SUMMARY || echo "All inputs are up to date" >> $GITHUB_STEP_SUMMARY

  # Build test on macOS for both profiles (only on schedule or when explicitly requested)
  build-darwin:
    name: Build Test (macOS) - All Profiles
    runs-on: macos-latest
    # Only run on schedule or if commit message contains [build]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[build]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        
      - name: Setup Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      
      # Attempt dry builds for both profiles
      - name: Dry build Personal configuration
        run: |
          nix build .#darwinConfigurations.personal.system \
            --dry-run --print-build-logs
      
      - name: Dry build Work configuration
        run: |
          nix build .#darwinConfigurations.work.system \
            --dry-run --print-build-logs
      
      # Report build closure sizes
      - name: Analyze closure sizes
        run: |
          echo "## Build Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "### Personal Profile:" >> $GITHUB_STEP_SUMMARY
          nix path-info -Sh .#darwinConfigurations.personal.system 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Closure size analysis not available" >> $GITHUB_STEP_SUMMARY
          echo "### Work Profile:" >> $GITHUB_STEP_SUMMARY
          nix path-info -Sh .#darwinConfigurations.work.system 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Closure size analysis not available" >> $GITHUB_STEP_SUMMARY

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    # Skip on push to avoid BASE=HEAD issue
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper scanning
      
      # Scan for accidentally committed secrets
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before || 'HEAD~1' }}
          head: ${{ github.event.pull_request.head.sha || 'HEAD' }}
      
      # Check for known vulnerabilities in dependencies
      - name: Security audit
        run: |
          echo "## Security Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "Scanning for known vulnerabilities..." >> $GITHUB_STEP_SUMMARY
          # Note: vulnix would be used here if available
          echo "Security scanning completed" >> $GITHUB_STEP_SUMMARY